#!/usr/bin/env bash

user=gbbirkisson
org="kolonialno"
base_repo_dir="$HOME/repos/oda"

# Prints the unix epoch from $1 days ago
days-ago() {
  local max_days=$1
  local now=$(date +%s)
  echo $(( $now - (86400 * $max_days) ))
}

# Wrapper for the gh command to easily pass in repo $1
gh-pr() {
  gh pr -R ${org}/$1 "${@:2}"
}

# Fetches all PRs from $org based on filters $@
pr-fetch() {
  # Note:
  #   We pass in "phony" repo, but get all PRs?! That's because we are not filtering
  #   PRs by repo, so the "phony" repo does not even have to exist.
  gh-pr phony list --json url,title,createdAt,author,reviewRequests -S "org:${org} -label:autoMerged $(echo $@)"
}

# Views PR $2 from repo $1. You can specify more params to pass to the GH client
pr-view() {
  local repo=$1
  local id=$2

  gh-pr $repo view $id "${@:3}"
}

# Checks out PR $2 from repo $1 locally
pr-checkout() {
  local repo=$1
  local id=$2
  local repo_dir="$base_repo_dir/$repo"

  # Clone repo if needed
  [ -d "$repo_dir" ] || gh repo clone $org/$repo $repo_dir

  # Checkout PR
  cd $repo_dir
  gh pr checkout $pr_id
  echo "🎉 PR checked out!"
}

prompt() {
  read -p "$@" -n 1 -r
  echo $REPLY
  unset $REPLY
}

# Fetch PRs, group, sort, filter and format for FZF
pr_list=`
{ 
  pr-fetch 'user-review-requested:@me' &
  pr-fetch 'team-review-requested:kolonialno/reliability' 'team-review-requested:kolonialno/infrastructure-developer-experience' &
  wait
} | jq -r -s \ '
  add
  | group_by(.title) | map(.[-1])
  | map(.author.type = (
    if (.author.login | contains("renovate")) 
    or (.author.login | contains("dependabot"))
    then "🧰"
    else "🧑"
    end))
  | map(.stats = {
      otherUserRequests: [(.reviewRequests[].login | select (. and . != "'$user'"))] | length,
      myRequests: [.reviewRequests[].login | select(. == "'$user'")] | length
    })
  | sort_by(
    .author.type, 
    -.stats.myRequests,
    .stats.otherUserRequests,
    .createdAt
  )
  | .[]
  | select(.createdAt | fromdateiso8601 > '$(days-ago 90)')
  | .author.type + " " + (.url | split("/") | .[-3]) + " #" + (.url | split("/") | .[-1]) + " " + .title
'
`

while true; do
  # Prompt user for PRs
  pr=$(echo "$pr_list" | fzf \
    --preview-window=right:65% \
    --preview '
      export GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS 
      export CLICOLOR_FORCE=1 
      gh pr view -R '$org'/{2} {3}
  ')
  # pr=$(echo "$pr_list" | tail -n 1)

  # Bail if no PR is selected
  [ -z "$pr" ] && break

  # Extract pr_repo and id
  pr_repo=$(echo $pr | awk '{print $2}')
  pr_id=$(echo $pr | awk '{print $3}')

  while true; do
    # Ask for command
    case $(prompt "🤔 $pr_repo $pr_id [Xcvbq?]: ") in
      "")
        break
      ;;
      "?") # Help
        echo && echo "🛟 Help!"
        echo "  q => 🚪 Exit"
        echo "  x => 🛑 Select some other PR"
        echo "  c => 📖 Checkout PR"
        echo "  v => 💻 View PR in terminal"
        echo "  b => 🌐 View PR in browser"
        echo "  ? => 🛟 Show this help"
      ;;
      "c" | "C") # Checkout
        echo && echo "📖 Checking out PR!"

        # Checkout PR
        pr-checkout $pr_repo $pr_id

        # Exit script
        break 2
      ;;
      "v" | "V") # View
        echo && echo "💻 View PR in terminal!"
        pr-view $pr_repo $pr_id --comments
      ;;
      "b" | "b") # View
        echo && echo "🌐 View PR in browser!"
        pr-view $pr_repo $pr_id --web > /dev/null 2>&1
      ;;
      "q" | "Q") # Close
        echo && break 2
      ;;
      "x" | "X" | *) # Close
        echo && break 1
      ;;
    esac
  done
done

# Cleanup
unset user
unset org
unset base_repo_dir

unset -f days-ago
unset -f gh-pr
unset -f pr-fetch
unset -f pr-view
unset -f pr-checkout
unset -f prompt

unset pr_list
unset pr
unset pr_repo
unset pr_id
