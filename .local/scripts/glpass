#!/usr/bin/env bash

set -e

# Set some variables
LP=lpass
SCRIPT_NAME=$(basename $0)
C_RED=$(tput setaf 1)
C_GREEN=$(tput setaf 2)
C_YELLOW=$(tput setaf 3)
C_PINK=$(tput setaf 5)
C_BOLD=$(tput bold)
C_RESET=$(tput sgr0)

usage() {
    cat <<EOF
Usage: $SCRIPT_NAME COMMAND [OPTIONS]
Fetch lastpass secrets.

Supported commands are:
  login
  logout
  ssh
  token
  credentials

Examples:

  Login to lpass:
    $ $SCRIPT_NAME login -le <EMAIL> -lk <KEY>

  Add ssh key to ssh-agent:
    $ $SCRIPT_NAME ssh -s

  Fetch token:
    $ $SCRIPT_NAME token

  Fetch token with id:
    $ $SCRIPT_NAME token -i xaori6o43fhmyh4zzc34nkayee

  Fetch a website login:
    $ $SCRIPT_NAME credentials

  Logout from 1password:
    $ $SCRIPT_NAME logout

Options:
  -i,  --id=          Skip searching and provide ID of item
  -s,  --ssh-add      Add to ssh agent (only works with ssh-key)
  -le, --login-email  Email to login with
  -h,  --help         Print usage
EOF
    exit 2
}

sh-log-lines() {
    for a in "$@"; do
        printf "\n  $a" 1>&2
    done
    printf "\n" 1>&2
}

sh-log-info() {
    printf "${C_GREEN}INFO${C_RESET}: $1" 1>&2
    sh-log-lines "${@:2}"
}

sh-log-warn() {
    printf "${C_YELLOW}WARN${C_RESET}: $1" 1>&2
    sh-log-lines "${@:2}"
}

sh-log-error() {
    printf "${C_RED}ERROR${C_RESET}: $1" 1>&2
    sh-log-lines "${@:2}"
    exit 1
}

sh-string-highlight() {
    d=""
    for a in "$@"; do
        printf "${C_BOLD}${C_PINK}$d$a${C_RESET}"
        d=" "
    done
}

lp-select-generic() {
    $LP ls --sync=no | \
        tr '[:upper:]' '[:lower:]' | \
        grep "$1" | \
        sort | \
        fzf --header 'Select item!' | \
        grep -o -E '\[id: .*\]' | \
        awk '{print $2}' | \
        sed 's%]%%g'
}

# Check for dependencies
command -v jq &>/dev/null || sh-log-error "Binary jq not found!" "Install jq before using this script!"
command -v fzf &>/dev/null || sh-log-error "Binary fzf not found!" "Install fzf before using this script!"
command -v $LP &>/dev/null || sh-log-error "Binary $LP not found!" "Install $LP before using this script!"

# Input arguments
COMMAND=""
SSH_ADD="false"
ID=""
LOGIN_EMAIL=""

# Parse input arguments
while [ "$#" -gt 0 ]; do
    case $1 in
    -h | --help)
        usage
        ;;
    -s | --ssh-add)
        SSH_ADD="true"
        ;;
    -i)
        shift
        ID="$1"
        ;;
    --id=*)
        ID=$(echo $1 | awk '{split($0,r,"="); print r[2]}')
        ;;
    -le)
        shift
        LOGIN_EMAIL="$1"
        ;;
    --login-email=*)
        LOGIN_EMAIL=$(echo $1 | awk '{split($0,r,"="); print r[2]}')
        ;;
    *)
        COMMAND="$1"
        ;;
    esac
    shift
done

# Verify command
case $COMMAND in
ssh | token | credentials | login | logout) ;;
*)
    [ "$COMMAND" == "" ] && usage
    sh-log-error "Unsupported command: $COMMAND"
    ;;
esac

# Handle login
if [ "$COMMAND" == "login" ]; then
    [ "$LOGIN_EMAIL" == "" ] && sh-log-error "Login email not provided" "Log in by running: $(sh-string-highlight "$SCRIPT_NAME login -le <EMAIL> -lk <KEY>")"
    $LP login $LOGIN_EMAIL
    exit 0
fi

# Handle logout
if [ "$COMMAND" == "logout" ]; then
    $LP logout
    exit 0
fi

# Test if session is valid
$LP status | grep -v "Not logged in." 2>&1 > /dev/null || sh-log-error "Not logged in to Lastpass!" "Log in by running: $(sh-string-highlight "$SCRIPT_NAME login -le <EMAIL>")"

# Get ID
if [ "$ID" == "" ]; then
    case $COMMAND in
    ssh)
        ID=$(lp-select-generic ssh)
        ;;
    token)
        ID=$(lp-select-generic token)
        ;;
    *)
        ID=$(lp-select-generic)
        ;;
    esac
fi

# Verify ID is selected
[ "$ID" == "" ] && sh-log-error "No item selected!"

# Fetch fields
case $COMMAND in
ssh)
    if [ "$SSH_ADD" == "true" ]; then
        $LP show --sync=no $ID --field "Private Key" | ssh-add -
    else
        $LP show --sync=no $ID --field "Private Key"
    fi
    ;;
token)
    $LP show --sync=no $ID --password
    ;;
credentials)
    $LP show --sync=no $ID --username
    $LP show --sync=no $ID --password
    ;;
*)
    sh-log-error "Unexpected state!"
    ;;
esac
